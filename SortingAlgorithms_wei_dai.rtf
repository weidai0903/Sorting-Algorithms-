{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww15120\viewh13160\viewkind0
\deftab720
\pard\pardeftab720\ql\qnatural

\f0\fs28 \cf0 CIT594 Sorting Algorithms \
Wei Dai\
\
1. Timing of different sorting algorithms\
N=1000\
time in Nano-second.\
1N means 1*N=1000.\
Only the sort() method is included in the start timing and stop timing. \
For each sorting algorithm, every array is produced randomly. For each size in 1N,2N,4N,8N in a single algorithm, 10 different arrays are randomly produced and sorted and the sorting time is counted, and the average time is calculated.\
In the TimeSortingAlgorithms class, in every timing method, there is a warming period before time counting start. Also, garbage collection is done before counting time.\
\
\
Algorithm name:\
Array Size | Average time for sorting an array\
Step Sort Algorithm timing:\
1N    657900\
2N    2447100\
4N    8214900\
8N    31367800\
Bubble Sorting Algorithm:\
1N    1640200\
2N    6895500\
4N    28879300\
8N    116591300\
Insertion Sort Algorithm timing:\
1N    258200\
2N    1005700\
4N    3884300\
8N    15333600\
Priority Sort Algorithm timing:\
1N    194400\
2N    422700\
4N    861700\
8N    1914200\
Selection Sort Algorithm timing:\
1N    871900\
2N    4524800\
4N    13230600\
8N    51261400\
\
We can see from above that the time complexity of Step Sort Algorithm is approximately O(n2), and that of Bubble Sort Algorithm is O(n2), also O(n2) for Insertion Sort and Selection Sort, but that of Priority Sort is almost O(n*log(n)). \
\
2. In JRat:\
Average Method ms:Method:\
SelectionSortAlgorithm:sort(int[]): 28.68\
StepSortAlgorithm:sort(int[]):43.40\
BubbleSortAlgorithm:sort(int[]):1199.70\
InsertionSortAlgorithm:sort(int[]):5.22\
PrioritySortAlgorithm:sort(int[]):1.42\
\
We can see from JRat that the most efficient one is the Priority Sort, and the slowest one is the bubble sort, which is also proved in the Timing test. Insertion Sort is the second most efficient algorithm, also true in the Timing test. \
\
3.Step Sorting \
The looping invariant of the inner loop is that, for every i<array.length-step, a[i]<=a[i+step]. The invariant of the outer loop is that, for every step, if i<array.length-step, a[i]<a[i+step]. I think step sort is most similar to bubble sort, because both involve the swap of elements, both trying to exchange the large ones to the right, and when the step decrease to 1, it is actually a bubble sort.\
\
 \
}